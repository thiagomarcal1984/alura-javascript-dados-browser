O objeto SubmitEvent tem o objeto target, que representa o formulário enviado.

O formulário contém os elementos do formulário em ordem numérica (target[0] 
acessa o primeiro elemento do array) e um objeto interno chamado elements (que 
contém os elementos nomeados).

Formas de acessar os objetos do formulário:
    form[0] => pega o primeiro objeto do formulário.
    form.elements['elemento'] => pega o objeto 'elemento' no formulário.

Diferença entre o método appendChild e a propriedade innerHtml:
    appendChild adiciona um elemento HTML dentro da tag que chama o método.
    innerHtml modifica o contéudo interno da tag que chama o método.

Não use o innerHtml para adicionar tags, porque o objeto JavaScript que 
representa a tag é inserido como [object HTMLElement], não como uma tag.

Não use o método appendChild para inserir uma string. Ela acrescenta apenas
elementos do tipo Node.

LocalStorage é um meio de armazenamento no navegador. É possível visualizá-los
na Devtools do browser. Você pode acessá-lo pelo objeto localStorage:
    console.log(localStorage)

Para acrescentar um item ao LocalStorage, use o método setItem:
    localStorage.setItem(key, value)

O item inserido pode ser acessado pelo nome da chave ou pelo método getItem:
    console.log(localStorage.key) // Sem aspas duplas.
    console.log(localStorage.getItem("key")) // Com aspas duplas.

Para remover itens do LocalStorage, use o método removeItem:
    localStorage.removeItem(key)

Para esvaziar o LocalStorage, use o método clear:
    localStorage.clear()

O método setItem sobreescreve o valor para uma mesma chave.

Salvar um objeto no LocalStorage traz o mesmo problema do innerHtml: é 
necessário converter a entrada JSON com o método stringify:
    localStorage.setItem("item", JSON.stringify(itemAtual))

O objeto "stringificado" que vai ficar no LocalStorage precisa ser um array,
caso você queira atualizar um objeto composto.

Em JavaScript, a notação abaixo serve para atribuir um valor padrão:
    const valor = objeto || "Valor padrão"

JSON.stringify converte um objeto JSON para String. 
O contrário é JSON.parse (converte texto para JSON).

Sintaxe de uma array function:
    // objeto.metodo(   () => { comando }    )
    lista.forEach(
        (variavel_temporaria) => {
            console.log(variavel_temporaria)
        }
    )

Para selecionar elementos pela propriedade data-id, use:
    // O seletor seria: data-id="valor-id" (aspas duplas pro valor).
    document.querySelector("[data-id='valor-id']") // Aspas simples pro valor.

O código ainda está com um problema: o LocalStorage não é atualizado quando
atualizamos um elemento já existente. Apenas a tela é atualizada.

As atualizações no LocalStorage necessariamente consiste na atualização de
toda a chave. Não é possível, por exemplo, atualizar um elemento de um array
dentro de uma chave do LocalStorage.

Declaração de variáveis em JavaScript:
https://www.alura.com.br/artigos/entenda-diferenca-entre-var-let-e-const-no-javascript?gclid=Cj0KCQiApL2QBhC8ARIsAGMm-KEr2-dj03os9u3elTSjRFtl_e2ePc7-v9snbcsYkQsFYfYYGLaa54kaAuluEALw_wcB

Detalhando:
    1)  Declarações com "var" permitem hoisting (içamento, move declarações 
        para antes do seu uso). "var" tem escopo global.
    2)  Declarações com "let" só permitem uso das variáveis dentro do seu local
        escope, ou seja, não há hoisting para declarações com let. Por padrão,
        essas declarações preenchem a variável com o valor "undefined".
    3)  Declarações com "const" *forçam* a inicialização da variável e impedem
        a substituição de seu valor. Constantes também tem escopo local, igual 
        às declarações com "let".
    4)  Uma convenção: use const como regra, let como exceção (para alterar o
        valor da variável). Declarações com "var" estão se tornando obsoletas.

Nesta parte do código retirado do projeto Mochila de Viagem, é possível 
conferir o uso do método find() e do operador de comparação ===:

    const existe = itens.find( elemento => elemento.nome === nome.value)

O código acima verifica se existe algum elemento com o mesmo nome. Caso exista,
ele guarda o objeto na const existe, ou undefined caso não exista.

Arrow function x Function com declaração completa.

    Arrow function: o contexto (this) é a própria janela:
        // () => {}
        elementoBotao.addEventListener("click", () =>{
            console.log(this) // Imprime o objeto Window.
        })

    Declaração completa da função: o contexto (this) é o botão clicado:
        // function () {}
        elementoBotao.addEventListener("click", function () {
            console.log(this) // Imprime o objeto que chamou (no caso, button).
        })


O método splice nos arrays do JavaScript serve para remover elementos dentro 
dele e tem dois parâmetros: a posição a  partir da qual os elementos serão 
excluídos e o número de elementos para excluir:
    items.splice(3, 2); // Remove dois elementos a partir da posição 3.

O método findIndex nos arrays do JavaScript retorna a posição do elemento 
procurado ou -1 se não encontrar o elemento. Suponha um array:
    let nums = [ "Um", "Dois", "Três" ] 
    let pos = nums.findIndex( obj => obj === "Dois") // Retorna 1 positivo.
    let pos = nums.findIndex( obj => obj === "Quatro") // Retorna 1 negativo.

Combinando isso, para remover um item do array com o id 1, usamos: 
    items.splice(items.findIndex( elemento => elemento.id === id), 1)
